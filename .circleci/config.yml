version: 2.1

orbs:
  slack: circleci/slack@4.12.0

workflows:
  wunder-weather:
    jobs:
      - build-frontend
      # - linting:
          # requires: [build-frontend]
      - publishLatestToHub

node-python-docker-image: &node-python-docker-image
   docker:
      - image: cimg/python:3.11.1-node

commands:
  notify-slack:
    steps:
      - slack/notify:
          event: fail
          channel: general
          template: basic_fail_1

jobs:

  build-frontend:
    <<: *node-python-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependancies
          command: |
            npm install
      - run:
          name: Build front-end
          command: |
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slack

  linting:
    <<: *node-python-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install hadolint
          command: |
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: linting
          command: |
            make install
            make lint
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  publishLatestToHub: 
    docker:
      - image: cimg/python:3.11.1-node
        environment:
          IMAGE_NAME: danrhjones/wunder-weather
          DOCKERHUB_USERNAME: $DOCKERHUB_USERNAME
          DOCKERHUB_PASSWORD: $DOCKERHUB_PASSWORD
    steps: 
      - checkout
      - setup_remote_docker
      
      - run: 
          name: Build Docker Image
          command: |
            docker build -t $IMAGE_NAME .
      - run: 
          name: Publish Docker Image to Docker Hub
          command: |
            docker login -u "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_PASSWORD"
            docker push $IMAGE_NAME:latest
